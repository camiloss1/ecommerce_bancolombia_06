{"ast":null,"code":"import { catchError, concat, concatMap, delay, of, retryWhen, take, throwError } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nclass GenericService {\n  constructor(http) {\n    this.http = http;\n  }\n  get(url, endpoint, params, headers) {\n    //this.graphql.query(jsdkjsdgf{uasdgasidiajd})\n    return this.http.get(`${url}/${endpoint}` + (params ?? ''), {\n      headers\n    }).pipe(retryWhen(errors => errors.pipe(concatMap(result => {\n      if (result.code === 504) {\n        return of(result);\n      }\n      return throwError(result);\n    }), delay(1000), take(4), o => concat(o, throwError(`No fue osible conectarse con el servidor.`)))), catchError(err => {\n      return this.handleError(err);\n    }));\n  }\n  post(url, endpoint, model, headers) {\n    return this.http.post(`${url}/${endpoint}`, model, {\n      headers\n    });\n  }\n  put(url, endpoint, model, headers) {\n    return this.http.put(`${url}/${endpoint}`, model, {\n      headers\n    });\n  }\n  patch(url, endpoint, model, headers) {\n    return this.http.patch(`${url}/${endpoint}`, model, {\n      headers\n    });\n  }\n  handleError(error) {\n    if (error.error != null && error.error.message === 'No Auth') {\n      localStorage.clear();\n    }\n    return throwError(error);\n  }\n}\nGenericService.ɵfac = function GenericService_Factory(t) {\n  return new (t || GenericService)(i0.ɵɵinject(i1.HttpClient));\n};\nGenericService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: GenericService,\n  factory: GenericService.ɵfac,\n  providedIn: \"root\"\n});\nexport { GenericService };","map":{"version":3,"names":["catchError","concat","concatMap","delay","of","retryWhen","take","throwError","GenericService","constructor","http","get","url","endpoint","params","headers","pipe","errors","result","code","o","err","handleError","post","model","put","patch","error","message","localStorage","clear","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["/Users/juansalazar/repos/Cedesistemas/ecommerce_bancolombia_06/src/app/infraestructure/driven-adapter/services/helpers/generic.service.ts"],"sourcesContent":["import { HttpClient, HttpErrorResponse, HttpHeaders } from \"@angular/common/http\";\nimport { Injectable } from \"@angular/core\";\nimport { Observable, catchError, concat, concatMap, delay, of, retryWhen, take, throwError } from \"rxjs\";\n\n@Injectable({\n   providedIn: \"root\"\n})\n\nexport class GenericService {\n   constructor(private http: HttpClient) {\n\n   }\n   public get<T>(url: string, endpoint: string, params?: string, headers?: HttpHeaders): Observable<any> {\n      //this.graphql.query(jsdkjsdgf{uasdgasidiajd})\n      return this.http.get<T>(`${url}/${endpoint}` + (params ?? ''), { headers }).pipe(\n         retryWhen(errors => errors.pipe(\n            concatMap((result: any) => {\n               if (result.code === 504) {\n                  return of(result);\n               }\n               return throwError(result);\n            }),\n            delay(1000),\n            take(4),\n            o => concat(o, throwError(`No fue osible conectarse con el servidor.`))\n         )),\n         catchError((err: HttpErrorResponse) => {\n            return this.handleError(err);\n         })\n      )\n   }\n\n   public post<T>(url: string, endpoint: string, model?: any, headers?: HttpHeaders): Observable<any> {\n      return this.http.post<T>(`${url}/${endpoint}`, model, { headers })\n   }\n   \n   public put<T>(url: string, endpoint: string, model?: any, headers?: HttpHeaders): Observable<any> {\n      return this.http.put<T>(`${url}/${endpoint}`, model, { headers })\n   }\n\n   public patch<T>(url: string, endpoint: string, model?: any, headers?: HttpHeaders): Observable<any> {\n      return this.http.patch<T>(`${url}/${endpoint}`, model, { headers })\n   }\n   handleError(error: HttpErrorResponse) {\n      if (error.error != null && error.error.message === 'No Auth') {\n         localStorage.clear();\n      }\n      return throwError(error);\n   }\n}"],"mappings":"AAEA,SAAqBA,UAAU,EAAEC,MAAM,EAAEC,SAAS,EAAEC,KAAK,EAAEC,EAAE,EAAEC,SAAS,EAAEC,IAAI,EAAEC,UAAU,QAAQ,MAAM;;;AAExG,MAIaC,cAAc;EACxBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;EAExB;EACOC,GAAGA,CAAIC,GAAW,EAAEC,QAAgB,EAAEC,MAAe,EAAEC,OAAqB;IAChF;IACA,OAAO,IAAI,CAACL,IAAI,CAACC,GAAG,CAAI,GAAGC,GAAG,IAAIC,QAAQ,EAAE,IAAIC,MAAM,IAAI,EAAE,CAAC,EAAE;MAAEC;IAAO,CAAE,CAAC,CAACC,IAAI,CAC7EX,SAAS,CAACY,MAAM,IAAIA,MAAM,CAACD,IAAI,CAC5Bd,SAAS,CAAEgB,MAAW,IAAI;MACvB,IAAIA,MAAM,CAACC,IAAI,KAAK,GAAG,EAAE;QACtB,OAAOf,EAAE,CAACc,MAAM,CAAC;;MAEpB,OAAOX,UAAU,CAACW,MAAM,CAAC;IAC5B,CAAC,CAAC,EACFf,KAAK,CAAC,IAAI,CAAC,EACXG,IAAI,CAAC,CAAC,CAAC,EACPc,CAAC,IAAInB,MAAM,CAACmB,CAAC,EAAEb,UAAU,CAAC,2CAA2C,CAAC,CAAC,CACzE,CAAC,EACFP,UAAU,CAAEqB,GAAsB,IAAI;MACnC,OAAO,IAAI,CAACC,WAAW,CAACD,GAAG,CAAC;IAC/B,CAAC,CAAC,CACJ;EACJ;EAEOE,IAAIA,CAAIX,GAAW,EAAEC,QAAgB,EAAEW,KAAW,EAAET,OAAqB;IAC7E,OAAO,IAAI,CAACL,IAAI,CAACa,IAAI,CAAI,GAAGX,GAAG,IAAIC,QAAQ,EAAE,EAAEW,KAAK,EAAE;MAAET;IAAO,CAAE,CAAC;EACrE;EAEOU,GAAGA,CAAIb,GAAW,EAAEC,QAAgB,EAAEW,KAAW,EAAET,OAAqB;IAC5E,OAAO,IAAI,CAACL,IAAI,CAACe,GAAG,CAAI,GAAGb,GAAG,IAAIC,QAAQ,EAAE,EAAEW,KAAK,EAAE;MAAET;IAAO,CAAE,CAAC;EACpE;EAEOW,KAAKA,CAAId,GAAW,EAAEC,QAAgB,EAAEW,KAAW,EAAET,OAAqB;IAC9E,OAAO,IAAI,CAACL,IAAI,CAACgB,KAAK,CAAI,GAAGd,GAAG,IAAIC,QAAQ,EAAE,EAAEW,KAAK,EAAE;MAAET;IAAO,CAAE,CAAC;EACtE;EACAO,WAAWA,CAACK,KAAwB;IACjC,IAAIA,KAAK,CAACA,KAAK,IAAI,IAAI,IAAIA,KAAK,CAACA,KAAK,CAACC,OAAO,KAAK,SAAS,EAAE;MAC3DC,YAAY,CAACC,KAAK,EAAE;;IAEvB,OAAOvB,UAAU,CAACoB,KAAK,CAAC;EAC3B;;AAxCUnB,cAAc,C;mBAAdA,cAAc,EAAAuB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;AAAd1B,cAAc,C;SAAdA,cAAc;EAAA2B,OAAA,EAAd3B,cAAc,CAAA4B,IAAA;EAAAC,UAAA,EAHZ;AAAM;SAGR7B,cAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}