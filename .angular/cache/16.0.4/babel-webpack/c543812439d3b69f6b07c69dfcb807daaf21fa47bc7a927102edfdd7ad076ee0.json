{"ast":null,"code":"import { catchError, concat, concatMap, delay, of, retryWhen, take, throwError } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nlet GenericService = /*#__PURE__*/(() => {\n  class GenericService {\n    constructor(http) {\n      this.http = http;\n    }\n    get(url, endpoint, params, headers) {\n      //this.graphql.query(jsdkjsdgf{uasdgasidiajd})\n      return this.http.get(`${url}/${endpoint}` + (params ?? ''), {\n        headers\n      }).pipe(retryWhen(errors => errors.pipe(concatMap(result => {\n        if (result.code === 504) {\n          return of(result);\n        }\n        return throwError(result);\n      }), delay(1000), take(4), o => concat(o, throwError(`No fue osible conectarse con el servidor.`)))), catchError(err => {\n        return this.handleError(err);\n      }));\n    }\n    post(url, endpoint, model, headers) {\n      return this.http.post(`${url}/${endpoint}`, model, {\n        headers\n      });\n    }\n    put(url, endpoint, model, headers) {\n      return this.http.put(`${url}/${endpoint}`, model, {\n        headers\n      });\n    }\n    patch(url, endpoint, model, headers) {\n      return this.http.patch(`${url}/${endpoint}`, model, {\n        headers\n      });\n    }\n    handleError(error) {\n      if (error.error != null && error.error.message === 'No Auth') {\n        localStorage.clear();\n      }\n      return throwError(error);\n    }\n  }\n  GenericService.ɵfac = function GenericService_Factory(t) {\n    return new (t || GenericService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  GenericService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: GenericService,\n    factory: GenericService.ɵfac,\n    providedIn: \"root\"\n  });\n  return GenericService;\n})();\nexport { GenericService };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}